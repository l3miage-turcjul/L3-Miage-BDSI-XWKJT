openapi: 3.0.3
info:
  title: L3 Miage PhotoNum
  description: |
    Cette api permet la gestion de la base de donnée d'une société de tirage de photo numérique.
    Elle permet de gérer les clients, les adresses, les commandes, les articles, les impressions, les tirages, les cadres, les calendriers, les albums, les pages, les images et les photos.
  version: 1.0.0
servers:
  - url: "http://localhost:8080"
paths:
  /api/v1/Client:
    get:
      summary: Trouver tous les clients
      operationId: find-clients
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
    post:
      summary: Creer un nouveau client
      operationId: create-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/BaseClient"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Dans le cas où le client ne peut être validé
  /api/v1/Client/{id}:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un client
      operationId: find-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"

        404:
          description: Le client n'a pas été trouvé
    put:
      summary: Mettre à jour les données d'un client
      description: La mise à jour sera faite si le client est trouvé
      operationId: update-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Dans le cas où le client ne peut être validé
        404:
          description: Le client n'a pas été trouvé
    delete:
      summary: Supprimer un client (et toutes ses adresses)
      operationId: delete-client
      responses:
        204:
          description: Supprimé
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/AdressePostale:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Creer une nouvelle adresse pour un client donné
      operationId: create-clients-adress
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewAdressePostale"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AdressePostale"
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/Commande:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Creer une nouvelle commande pour un client donné
      operationId: new-client-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewCommande"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/Photo:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Creer une nouvelle photo pour un client donné
      operationId: new-client-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewPhoto"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Le client n'a pas été trouvé


  /api/v1/Client/{id}/Image:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les images d'un client donné
      operationId: find-all-images-of-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        404:
          description: L'image n'a pas été trouvée
    post:
      summary: Creer une nouvelle image pour un client donné
      operationId: new-client-image
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewImage"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Image"
        404:
          description: Le client n'a pas été trouvé 
        
###############################################################################################################
##PHOTO
  /api/v1/Photo:
    get:
      summary: Trouver toutes les photos
      operationId: find-photos
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
  /api/v1/Photo/{id}:
    parameters:
      - name: id
        description: id de la photo
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une photo
      operationId: find-photo
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"

        404:
          description: La photo n'a pas été trouvée 
    put:
      summary: Mettre à jour photo
      description: La mise à jour sera faite si la photo est trouvée
      operationId: update-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        400:
          description: Dans le cas où la photo ne peut être validée
        404:
          description: La photo n'a pas été trouvée
    delete:
      summary: Supprimer une photo (et toutes ses adresses)
      operationId: delete-photo
      responses:
        204:
          description: Supprimé
        404:
          description: Le photo n'a pas été trouvée


###############################################################################################################
  /api/v1/Calendrier:
    get:
      summary: Trouver tous les calendriers
      operationId: find-calandriers
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Calendrier"
   
  /api/v1/Calendrier/{id}:
    parameters:
      - name: id
        description: id du calendrier
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un calendrier
      operationId: find-calendrier
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"

        404:
          description: Le calendrier n'a pas été trouvé
    put:
      summary: Mettre à jour le calendrier
      description: La mise à jour sera faite si le calendrier est trouvé
      operationId: update-calendrier
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Calendrier"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: Dans le cas où le calendrier ne peut être validé
        404:
          description: Le calendrier n'a pas été trouvé
    delete:
      summary: Supprimer un calendrier (avec toutes ses pages)
      operationId: delete-calendrier
      responses:
        204:
          description: Supprimé
        404:
          description: Le calendrier n'a pas été trouvé

  /api/v1/Calendrier/{id}/Page:
    parameters:
      - name: id
        description: id du calendrier
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les pages d'un calendrier d'id id
      operationId: find-all-pages-of-calendar
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        404:
          description: Le calendrier n'a pas été trouvé
##############################################################################################################
##Album
  /api/v1/Album:
    get:
      summary: Trouver tous les albums
      operationId: find-ablums
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
  
  /api/v1/Album/{id}:
    parameters:
      - name: id
        description: id de l'album
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un album
      operationId: find-album
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        404:
          description: L'album n'a pas été trouvé 
    put:
      summary: Mettre à jour l'album
      description: La mise à jour sera faite si l'album est trouvé
      operationId: update-album
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: Dans le cas où l'album ne peut être validé
        404:
          description: L'album n'a pas été trouvé
    delete:
      summary: Supprimer un album (et toutes ses pages)
      operationId: delete-album
      responses:
        204:
          description: Supprimé
        404:
          description: L'album n'a pas été trouvé

  /api/v1/Album/{id}/Page:
    parameters:
      - name: id
        description: id de l'album
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les pages de l'album d'id id
      operationId: find-all-pages-of-album
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        404:
          description: L'album n'a pas été trouvé n'a pas été trouvé
################################################################################################################
  /api/v1/AdressePostale:
    get:
      summary: Trouver toutes les adresses postales
      operationId: get-adress
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AdressePostale"

  /api/v1/AdressePostale/{id}:
    parameters:
      - name: id
        description: id de l'adresse postale
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une adresse
      operationId: get-adress
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdressePostale"
        404:
          description: L'adresse n'a pas été trouvée
    put:
      summary: Mettre à jour une adresse
      operationId: update-adress
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AdressePostale"
      responses:
        404:
          description: L'adresse n'a pas été trouvée
    delete:
      summary: Supprimer une adresse
      operationId: delete-adress
      responses:
        204:
          description: Supprimés
        404:
          description: L'adresse postale n'a pas été trouvée

  /AdressePostale/{id}/Client:
    parameters:
      - name: id
        description: id de l'adresse postale
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver le client associé à l'adresse
      operationId: get-adress-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"
        404:
          description: L'adresse n'a pas été trouvée

#Article

  /api/v1/Article:
    get:
      summary: Trouver tous les articles
      operationId: get-orders
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Article"
  /api/v1/Article/{id}:
    parameters:
      - name: id
        description: id de l'article
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un article
      operationId: get-order
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Article"
        404:
          description: L'article n'a pas été trouvé
    put:
      summary: Mettre à jour un article
      operationId: update-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        404:
          description: L'article n'a pas été trouvée
    delete:
      summary: Supprimer un article
      operationId: delete-order
      responses:
        204:
          description: Suppriméee
        404:
          description: L'article n'a pas été trouvée
  
  /Article/{id}/Album:
    parameters:
      - name: id
        description: id de l'article
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Créer un album pour l'article d'id id
      operationId: create-article-album
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewAlbum"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: Dans le cas où l'album ne peut être validé
        404:
          description: L'article n'a pas été trouvé
    
  /api/v1/Article/{id}/Tirage:
    parameters:
      - name: id
        description: id de l'article
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Créer un tirage pour l'article d'id id
      operationId: create-article-tirage
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewTirage"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"
        400:
          description: Dans le cas où le tirage ne peut être validé
        404:
          description: L'article n'a pas été trouvé

  /api/v1/Article/{id}/Calendrier:
      parameters:
        - name: id
          description: id de l'article
          in: path
          required: true
          schema:
            type: number
            format: int64
      post:
        summary: Creer un nouveau calendrier
        operationId: create-article-calendrier
        requestBody:
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/NewCalendrier"
        responses:
          201:
            description: Créé
            content:
              'application/json':
                schema:
                  $ref: "#/components/schemas/Calendrier"
          400:
            description: Dans le cas où le calendrier ne peut être validé
          404:
            description: L'article n'a pas été trouvé
    
  /api/v1/Article/{id}/Cadre:
      parameters:
        - name: id
          description: id de l'article
          in: path
          required: true
          schema:
            type: number
            format: int64
      post:
        summary: Créer un nouveau cadre
        operationId: create-article-cadre
        requestBody:
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/NewCadre"
        responses:
          201:
            description: Créé
            content:
              'application/json':
                schema:
                  $ref: "#/components/schemas/Cadre"
          400:
            description: Dans le cas où le cadre ne peut être validé
          404:
            description: L'article n'a pas été trouvé

##############################################################################################################
  /api/v1/Tirage:
    get:
      summary: Trouver tous les tirages
      operationId: get-tirages
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"

  /api/v1/Tirage/{id}:
    parameters:
      - name: id
        description: id du tirage
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un tirage
      operationId: get-tirage
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Tirage"
        404:
          description: Le tirage n'a pas été trouvé
    put:
      summary: Mettre à jour un tirage
      operationId: update-tirage
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Tirage"
      responses:
        404:
          description: Le tirage n'a pas été trouvée
    delete:
      summary: Supprimer un tirage
      operationId: delete-tirage
      responses:
        204:
          description: Suppriméee
        404:
          description: Le tirage n'a pas été trouvé


#############################################################################################################

  /api/v1/Image:
    get:
      summary: Trouver toutes les images
      operationId: get-images
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Image"

  /api/v1/Image/{id}:
    parameters:
      - name: id
        description: id de l'image
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une image
      operationId: get-image
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Image"
        404:
          description: L'image n'a pas été trouvé
    put:
      summary: Mettre à jour une image
      operationId: update-image
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        404:
          description: L'image n'a pas été trouvée
    delete:
      summary: Supprimer une image
      operationId: delete-image
      responses:
        204:
          description: Supprimée
        404:
          description: L'image n'a pas été trouvée
#############################################################################################################

  #Commande

  /api/v1/Commande:
    get:
      summary: Trouver toutes les commandes
      operationId: get-orders
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
  /api/v1/Commande/{id}:
    parameters:
      - name: id
        description: id de commande
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une commande
      operationId: get-order
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
        404:
          description: La commande n'a pas été trouvée
    put:
      summary: Mettre à jour une commande
      operationId: update-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Commande"
      responses:
        404:
          description: La commande n'a pas été trouvée
    delete:
      summary: Supprimer une commande
      operationId: delete-order
      responses:
        204:
          description: Suppriméee
        404:
          description: La commande n'a pas été trouvée
  /api/v1/Commande/{id}/Article:
    parameters:
      - name: id
        description: id de la commande
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Creer un nouveau article pour une commande donnée
      operationId: create-commande-article
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewArticle"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Article"
        404:
          description: La commande n'a pas été trouvée
        400:
          description: Dans le cas où l'article ne peut être validé


  #Cadre

  /api/v1/Cadre:
    get:
      summary: Trouver tous les cadres
      operationId: get-cadres
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/NewCadre"
                
  /api/v1/Cadre/{id}:
    parameters:
      - name: id
        description: id du cadre
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un cadre
      operationId: get-cadre
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Cadre"
        404:
          description: Le cadre n'a pas été trouvé
    put:
      summary: Mettre à jour un cadre
      operationId: update-cadre
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Cadre"
      responses:
        404:
          description: Le cadre n'a pas été trouvé
    delete:
      summary: Supprimer un cadre
      operationId: delete-cadre
      responses:
        204:
          description: Supprimé
        404:
          description: Le cadre n'a pas été trouvé
  
  /Cadre/{id}/Photos:
    parameters:
      - name: id
        description: id du cadre
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver les photos d'un cadre
      operationId: get-cadre-photos
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Le cadre n'a pas été trouvé
    post:
      summary: Ajouter une photo à un cadre
      operationId: add-cadre-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewPhoto"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Le cadre n'a pas été trouvé
        400:
          description: La photo ne peut être validée
        
  /api/v1/Page:
    get:
      summary: Trouver toutes les pages
      operationId: get-pages
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Page"

  /api/v1/Page/{id}:
    parameters:
      - name: id
        description: id de la page
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une page
      operationId: get-page
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Page"
        404:
          description: La page n'a pas été trouvée
    put:
      summary: Mettre à jour une page
      operationId: update-page
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Page"
      responses:
        404:
          description: La page n'a pas été trouvée
    delete:
      summary: Supprimer une page
      operationId: delete-page
      responses:
        204:
          description: Supprimée
        404:
          description: La page n'a pas été trouvée

###############################################################################################################
components:
  schemas:
    BaseClient:
      description: Un client, sans id (pour la creation)
      type: object
      properties:
        nom:
          type: string
        prenoms :
          type : string
        email:
          type : string
        motDePasse:
          type : string
      required:
        - name
        - email
        - motDePasse
      example:
        name: Turc
        prenoms : Julien
        email : julien.turc@etu.univ-grenoble-alpes.fr
        motDepasse : 1234
    Client:
      description: Un client, pour tout usage sauf la création
      allOf:
        - $ref: "#/components/schemas/BaseClient"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            name :
              type: string
            email : 
              type : string
            motDePasse :
              type : string
          required:
            - id
            - name
          example:
            id: 1
            name: Turc
            prenoms : Julien
            email :  julien.turc@etu.univ-grenoble-alpes.fr
            motDePasse : 1234
    NewAdressePostale:
      description: Une adresse postale sans id (pour la creation)
      type: object
      properties:
        adresse:
          type: string
        codePostal:
          description: code postal
          type: string
        ville:
          type: string
        pays:
          type: string
      required:
        - adresse
        - codePostal
        - ville
        - pays
      example:
        adresse: 60 rue de la chimie
        codePostal: 38140
        ville: Saint-Martin d'Hères
        pays: France
    AdressePostale:
      description: Une adresse postale avec id (pour la mise à jour) et clients (juste la reponse)
      allOf:
        - $ref: "#/components/schemas/NewAdressePostale"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            clients:
              type: array
              items:
                $ref: "#/components/schemas/Client"
              readOnly: true
          required:
            - id
      example:
        id: 1
        adresse : 60 rue de la chimie
        codePostal: 38140
        ville: Saint-Martin d'Hères
        pays: France
        authors:
          - id: 1
            name: Turc
            prenoms : Julien
            email : julien.turc@etu.univ-grenoble-alpes.fr
            motDePasse : 1234
          - id: 2
            name: Dupont
            prenoms : Jean
            email : jean.dupon@etu.univ-grenoble-alpes.fr
            motDePasse : 1234


    NewCommande:
      description: Une commande sans id (pour la création)
      type: object
      properties:
        dateCommande:
          type: string
        prixTotal:
          description: prix total de la commande
          type: integer
          format: int64
        adressePostale:
          type: object
          items:
            $ref: "#/components/schemas/AdressePostale"
      required:
        - dateCommande
        - adressePostale
      example:
        dateCommande: 01/04/2023
        adressePostale :
          - id: 1
            adresse: 60 rue de la chimie
            codePostal: 38140
            ville: Saint-Martin d'Hères
            pays: France

    Commande:
      description: Une commande avec id (pour la mise à jour) et son client (pour la réponse)
      allOf:
        - $ref: "#/components/schemas/NewCommande"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            client:
              type: object
              items:
                $ref: "#/components/schemas/Client"
              readOnly: true
          required:
            - id
      example:
        id: 1
        dateCommande: 12/02/2022
        AdressePostale:
          - id: 1
            adresse: 60 rue de la chimie
            codePostal: 38140
            ville: Saint-Martin d'Hères
            pays: France
        client:
          - id: 1
            name: Turc
            prenoms : Julien
            email : julien.turc@etu.univ-grenoble-alpes.fr
            motDePasse : 1234


################################################################################################################

    NewPhoto:
      description: Une photo sans id (pour la création)
      type: object
      properties:
        parametresRetouche:
          type: string
        description:
          type: string
        image:
          type: object
          items:
            $ref: "#/components/schemas/Image"
      required:
        - description
        - image
      example:
        description: cette photo est fait référence à l'image "cochon.png"
        parametresRetouche: saturation à 20%
        image:
          - id: 1
            cheminAcces: /images/cochon.png
            InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
            resolution: 20
            partage: false

    Photo:
      description: Une photo avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewPhoto"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        parametresRetouche: saturation à 20%
        image:
          - id: 1
            cheminAcces: /images/cochon.png
            InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
            resolution: 20
            partage: false


############################################################################################################

    NewAlbum:
      description: Un album sans id (pour la création)
      type: object
      properties:
        titre:
          type: string
        pages:
          description: les pages de l'album
          type: array
          items:
            $ref: "#/components/schemas/Page"
        photoDeCouverture:
          type: object
          items:
            $ref: "#/components/schemas/Photo"
      required:
        - titre
      example:
       titre : "L'album de Sicong"
       pages:
          - id: 1
            numeroPage: 1
            photo:
              - id: 1
                parametersRetouche: saturation à 20%
                image:
                  - id: 1
                    cheminAcces: /images/cochon.png
                    InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                    resolution: 20
                    partage: false
          - id: 2
            numeroPage: 2
            photo:
              - id: 2
                parametersRetouche: saturation à 20%
                image:
                  - id: 2
                    cheminAcces: /images/cochon.png
                    InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                    resolution: 20
                    partage: false

    Album:
      description: Un album avec id (pour la mise à jour) et sa page (pour la réponse)
      allOf:
        - $ref: "#/components/schemas/NewAlbum"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        titre : "L'album de Sicong"
        photoDeCouverture:
          - id: 1
            parametersRetouche: saturation à 20%
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
        pages:
          - id: 1
            numeroPage: 1
            photo:
              - id: 1
                parametersRetouche: saturation à 20%
                image:
                  - id: 1
                    cheminAcces: /images/cochon.png
                    InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                    resolution: 20
                    partage: false
          - id: 2
            numeroPage: 2
            photo:
              - id: 2
                parametersRetouche: saturation à 40%
                image:
                  - id: 1
                    cheminAcces: /images/cochon.png
                    InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                    resolution: 20
                    partage: false
####################################################################
    NewArticle:
      description: Un article sans id (pour la création)
      type: object
      properties:
        format:
            type: string
        quantite:
            type: integer
            format: int64
      required:
          - format
          - quantite
      example:
          format: 10X15MAT
          quantite: 3

    Article:
        description: Un article avec id et prix
        allOf:
          - $ref: "#/components/schemas/NewArticle"
        properties:
          id:
            type: integer
            format: int64
          prix:
            type: integer
            format: int64
        required:
          - id
          - prix
        example:
          id: 1
          prix: 10.5
          format: 10X15MAT
          quantite: 3

#################################################################################################################

    NewCalendrier:
      description: Un calendrier sans id (pour la création)
      type: object
      properties:
        pages:
          type: array
          $ref: "#/components/schemas/Page"
          minItems: 12
          maxItems: 12
      required:
        - pages 
      example:
        pages:
          - id: 1
            numeroPage: 1
          - id: 2
            numeroPage: 2
          - id: 3
            numeroPage: 3
          - id: 4
            numeroPage: 4
          - id: 5
            numeroPage: 5
          - id: 6
            numeroPage: 6
          - id: 7
            numeroPage: 7
          - id: 8
            numeroPage: 8
          - id: 9
            numeroPage: 9
          - id: 10
            numeroPage: 10
          - id: 11
            numeroPage: 11
          - id: 12
            numeroPage: 12
            

    Calendrier:
      description: Un calendrier avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewCalendrier"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        pages:
          - id: 1
            numeroPage: 1
          - id: 2
            numeroPage: 2
          - id: 3
            numeroPage: 3
          - id: 4
            numeroPage: 4
          - id: 5
            numeroPage: 5
          - id: 6
            numeroPage: 6
          - id: 7
            numeroPage: 7
          - id: 8
            numeroPage: 8
          - id: 9
            numeroPage: 9
          - id: 10
            numeroPage: 10
          - id: 11
            numeroPage: 11
          - id: 12
            numeroPage: 12

################################################################################################################
    NewPage:
      description: Une page sans id (pour la création)
      type: object
      properties:
        miseEnPage:
          type: string
        numeroPage:
          type: string
      required:
        - numeroPage
      example:

    Page:
      description: Une page avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewPage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            photos:
              type: array
              $ref: "#/components/schemas/Photo"
          required:
            - id
      example:
        id: 1
        photos:
          - id: 1
            parametresRetouche: noir et blanc
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
            

###############################################################
    NewCadre:
      description: Un cadre sans id (pour la création)
      type: object
      properties:
        miseEnPage:
          type: string
        photos:
          type: array
          $ref: "#/components/schemas/Photo"
      required:
        - miseEnPage
      example:
        miseEnPage: zoom*2
        photos:
          - id: 1
            parametresRetouche: noir et blanc
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
    Cadre:
      description: Un cadre avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewCadre"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        miseEnPage: zoom*2
        photos:
          - id: 1
            parametresRetouche: noir et blanc
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
################################################################################

    NewTirage:
      description: Un tirage sans id (pour la création)
      type: object
      properties:
        photos:
          type: array
          $ref: "#/components/schemas/Photo"
      required:
        - photos
      example:
        photos:
          - id: 1
            parametresRetouche: noir et blanc
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
    Tirage:
      description: Un tirage avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewTirage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        photos:
          - id: 1
            parametresRetouche: noir et blanc
            image:
              - id: 1
                cheminAcces: /images/cochon.png
                InfoPDV: 'Device : Canon EOS 5D Mark IV, Focal length : 50mm, Aperture : f/1.4, Exposure time : 1/1000, ISO : 100, Date : 2019:05:01 12:00:00'
                resolution: 20
                partage: false
            
##########################################################################################

    NewImage:
      description: Une image sans id (pour la création)
      type: object
      properties:
        cheminAcces:
          type: string
        InfoPDV:
          type: string
        proprietaire:
          type: object
          $ref: "#/components/schemas/Client"
        resolution:
          type: number
          format: float
        partage:
          type: boolean
      required:
        - cheminAcces

    Image:
      description: Une image avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewImage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        cheminAcces: 'C:\Users\Public\Pictures\Sample Pictures\Koala.jpg'
        InfoPDV: 'Device : Huawei Ane-LX1, OS : Android 9, App : PhotoApp'
        resolution: 10.5
        partage: true
        proprietaire:
          - id: 1
            nom: Xu
            prenom: Sicong
            email: sicon.xu@etu.univ-grenoble-alpes.fr
            motDePasse: 123456
      
