openapi: 3.0.3
info:
  title: L3 Miage PhotoNum
  description: |
    Cette api permet la gestion de la base de donnée d'une société de tirage de photo numérique.
    Elle permet de gérer les clients, les adresses, les commandes, les articles, les impressions, les tirages, les cadres, les calendriers, les albums, les pages, les images et les photos.
  version: 1.0.0
servers:
  - url: "http://localhost:8080"
paths:
  /api/v1/Client:
    get:
      summary: Trouver tous les clients
      operationId: find-clients
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
    post:
      summary: Creer un nouveau client
      operationId: create-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/BaseClient"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Dans le cas où le client ne peut être validé
  /api/v1/Client/{id}:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un client
      operationId: find-client
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"

        404:
          description: Le client n'a pas été trouvé
    put:
      summary: Mettre à jour les données d'un client
      description: La mise à jour sera faite si le client est trouvé
      operationId: update-client
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Client"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Client"
        400:
          description: Dans le cas où le client ne peut être validé
        404:
          description: Le client n'a pas été trouvé
    delete:
      summary: Supprimer un client (et toutes ses adresses)
      operationId: delete-client
      responses:
        204:
          description: Supprimé
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/AdressePostale:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les adresses postales d'un client donné
      operationId: find-clients-adress
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdressePostale"
        404:
          description: Le client n'a pas été trouvé
    post:
      summary: Creer une nouvelle adresse pour un client donné
      operationId: new-clients-adress
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewAdressePostale"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AdressePostale"
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/Commande:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les commandes d'un client donné
      operationId: find-clients-ordres
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Commande"
        404:
          description: Le client n'a pas été trouvé
    post:
      summary: Creer une nouvelle commande pour un client donné
      operationId: new-client-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewCommande"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
        404:
          description: Le client n'a pas été trouvé

  /api/v1/Client/{id}/Photo:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    post:
      summary: Creer une nouvelle photo pour un client donné
      operationId: new-client-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewPhoto"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Le client n'a pas été trouvé


  /api/v1/Client/{id}/Image:
    parameters:
      - name: id
        description: id du client
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les images d'un client donné
      operationId: find-all-images-of-client
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Image"
        404:
          description: L'image n'a pas été trouvée 
        
###############################################################################################################
##PHOTO
  /api/v1/Photo:
    get:
      summary: Trouver toutes les photos
      #operationId: find-authors
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
    post:
      summary: Creer une nouvelle photo
      operationId: nouvelle-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        400:
          description: Dans le cas où la photo ne peut être validée
  /api/v1/Photo/{id}:
    parameters:
      - name: id
        description: id de la photo
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une photo
      operationId: trouver-photo
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"

        404:
          description: La photo n'a pas été trouvée 
    put:
      summary: Mettre à jour photo
      description: La mise à jour sera faite si la photo est trouvée
      operationId: put-photo
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Photo"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        400:
          description: Dans le cas où la photo ne peut être validée
        404:
          description: La photo n'a pas été trouvée
    delete:
      summary: Supprimer une photo (et toutes ses adresses)
      operationId: delete-photo
      responses:
        204:
          description: Supprimé
        404:
          description: Le photo n'a pas été trouvée


###############################################################################################################
  /api/v1/Calendrier:
    get:
      summary: Trouver tous les calendriers
      #operationId: find-authors
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Calendrier"
    post:
      summary: Creer un nouveau calendrier
      operationId: nouveau-calendrier
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Calendrier"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: Dans le cas où le calendrier ne peut être validé

  /api/v1/Calendrier/{id}:
    parameters:
      - name: id
        description: id du calendrier
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un calendrier
      operationId: trouver-calendrier
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"

        404:
          description: Le calendrier n'a pas été trouvé
    put:
      summary: Mettre à jour le calendrier
      description: La mise à jour sera faite si le calendrier est trouvé
      operationId: update-calendrier
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Calendrier"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Calendrier"
        400:
          description: Dans le cas où le calendrier ne peut être validé
        404:
          description: Le calendrier n'a pas été trouvé
    delete:
      summary: Supprimer un caleendrier (avec toutes ses pages)
      operationId: delete-calendrier
      responses:
        204:
          description: Supprimé
        404:
          description: Le calendrier n'a pas été trouvé

  /api/v1/Calendrier/{id}/Page:
    parameters:
      - name: id
        description: id du calendrier
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les pages d'un calendrier d'id id
      operationId: find-all-pages-of-calendar
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        404:
          description: Le calendrier n'a pas été trouvé
##############################################################################################################
##Album
  /api/v1/Album:
    get:
      summary: Trouver tous les albums
      #operationId: find-authors
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
    post:
      summary: Creer un nouvel album
      operationId: nouvel-album
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        201:
          description: Créé
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: Dans le cas où l'album ne peut être validé

  /api/v1/Album/{id}:
    parameters:
      - name: id
        description: id de l'album
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un album
      operationId: trouver-album
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"

        404:
          description: L'album n'a pas été trouvé 
    put:
      summary: Mettre à jour l'album
      description: La mise à jour sera faite si l'album est trouvé
      operationId: put-album
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Album"
      responses:
        200:
          description: Mis à jour
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Album"
        400:
          description: Dans le cas où l'album ne peut être validé
        404:
          description: L'album n'a pas été trouvé
    delete:
      summary: Supprimer un album (et toutes ses pages)
      operationId: delete-album
      responses:
        204:
          description: Supprimé
        404:
          description: L'album n'a pas été trouvé

  /api/v1/Album/{id}/Page:
    parameters:
      - name: id
        description: id de l'album
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver toutes les pages de l'album d'id id
      operationId: find-all-pages-of-album
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        404:
          description: L'album n'a pas été trouvé n'a pas été trouvé
################################################################################################################
  /api/v1/AdressePostale:
    get:
      summary: Trouver toutes les adresses postales
      operationId: get-adress
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AdressePostale"

  /api/v1/AdressePostale/{id}:
    parameters:
      - name: id
        description: id de l'adresse postale
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une adresse
      operationId: get-adress
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AdressePostale"
        404:
          description: L'adresse n'a pas été toruvée
    put:
      summary: Mettre à jour une adresse
      operationId: update-adress
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/AdressePostale"
      responses:
        404:
          description: L'adresse n'a pas été trouvée
    delete:
      summary: Supprimer une adresse
      operationId: delete-adress
      responses:
        204:
          description: Supprimés
        404:
          description: L'adresse postale n'a pas été trouvée


#Article

  /api/v1/Article:
    get:
      summary: Trouver tous les articles
      operationId: get-orders
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Article"
  /api/v1/Article/{id}:
    parameters:
      - name: id
        description: id de l'article
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un article
      operationId: get-order
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Article"
        404:
          description: L'article n'a pas été trouvé
    put:
      summary: Mettre à jour un article
      operationId: update-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Article"
      responses:
        404:
          description: L'article n'a pas été trouvée
    delete:
      summary: Supprimer un article
      operationId: delete-order
      responses:
        204:
          description: Suppriméee
        404:
          description: L'article n'a pas été trouvée

  /api/v1/Article/{id}/Tirage:
    parameters:
      - name: id
        description: id de l'article
        in: path
        required: true
        schema:
         type: number
         format: int64
    get:
      summary: Trouver tous les tirages d'un article
      operationId: find-all-tirages-of-article
      parameters:
        - name: q
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tirage"
        404:
          description: Le tirage n'a pas été trouvé n'a pas été trouvé
##############################################################################################################
  /api/v1/Tirage:
    get:
      summary: Trouver tous les tirages
      operationId: get-tirages
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Tirage"

  /api/v1/Tirage/{id}:
    parameters:
      - name: id
        description: id du tirage
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un tirage
      operationId: get-tirage
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Tirage"
        404:
          description: Le tirage n'a pas été trouvé
    put:
      summary: Mettre à jour un tirage
      operationId: update-tirage
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Tirage"
      responses:
        404:
          description: Le tirage n'a pas été trouvée
    delete:
      summary: Supprimer un tirage
      operationId: delete-tirage
      responses:
        204:
          description: Suppriméee
        404:
          description: Le tirage n'a pas été trouvé


#############################################################################################################

  /api/v1/Image:
    get:
      summary: Trouver toutes les images
      operationId: get-images
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Image"

  /api/v1/Image/{id}:
    parameters:
      - name: id
        description: id de l'image
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une image
      operationId: get-image
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                  $ref: "#/components/schemas/Image"
        404:
          description: Le tirage n'a pas été trouvé
    put:
      summary: Mettre à jour une image
      operationId: update-image
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Image"
      responses:
        404:
          description: L'image n'a pas été trouvée
    delete:
      summary: Supprimer une image
      operationId: delete-image
      responses:
        204:
          description: Supprimée
        404:
          description: L'image n'a pas été trouvée
#############################################################################################################

  #Commande

  /api/v1/Commande:
    get:
      summary: Trouver toutes les commandes
      operationId: get-orders
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
  /api/v1/Commande/{id}:
    parameters:
      - name: id
        description: id de commande
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver une commande
      operationId: get-order
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Commande"
        404:
          description: La commande n'a pas été trouvée
    put:
      summary: Mettre à jour une commande
      operationId: update-order
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Commande"
      responses:
        404:
          description: La commande n'a pas été trouvée
    delete:
      summary: Supprimer une commande
      operationId: delete-order
      responses:
        204:
          description: Suppriméee
        404:
          description: La commande n'a pas été trouvée
  /api/v1/Commande/{id}/Article:
    parameters:
      - name: id
        description: id de la commande
        in: path
        required: true
        schema:
          type: number
          format: int64
    post:
      summary: Creer un nouveau article pour une commande donnée
      operationId: new-commande-article
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/NewArticle"
      responses:
        201:
          description: Créée
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Article"
        404:
          description: La commande n'a pas été trouvée


  #Cadre

  /api/v1/Cadre:
    get:
      summary: Trouver tous les cadres
      operationId: get-cadres
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/NewCadre"
                
  /api/v1/Cadre/{id}:
    parameters:
      - name: id
        description: id du cadre
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver un cadre
      operationId: get-cadre
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Cadre"
        404:
          description: Le cadre n'a pas été trouvé
    put:
      summary: Mettre à jour un cadre
      operationId: update-cadre
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Cadre"
      responses:
        404:
          description: Le cadre n'a pas été trouvé
    delete:
      summary: Supprimer un cadre
      operationId: delete-cadre
      responses:
        204:
          description: Supprimé
        404:
          description: Le cadre n'a pas été trouvé
  
  /Cadre/{id}/Photos:
    parameters:
      - name: id
        description: id du cadre
        in: path
        required: true
        schema:
          type: number
          format: int64
    get:
      summary: Trouver les photos d'un cadre
      operationId: get-cadre-photos
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Photo"
        404:
          description: Le cadre n'a pas été trouvé
        
###############################################################################################################
components:
  schemas:
    BaseClient:
      description: Un client, sans id (pour la creation)
      type: object
      properties:
        nom:
          type: string
        prenoms :
          type : array
          #items : 
        email:
          type : string
        motDePasse:
          type : string
      required:
        - name
        - email
        - motDePasse
      example:
        name: Turc
        prenoms : Julien
        email : julien.turc@etu.univ-grenoble-alpes.fr
        motDepasse : 1234
    Client:
      description: Un client, pour tout usage sauf la création
      allOf:
        - $ref: "#/components/schemas/BaseClient"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            name :
              type: string
            email : 
              type : string
            motDePasse :
              type : string
          required:
            - id
            - name
          example:
            id: 1
            name: Turc
    NewAdressePostale:
      description: Une adresse postale sans id (pour la creation)
      type: object
      properties:
        adresse:
          type: string
        codePostal:
          description: code postal
          type: integer
          format: int64
          minimum: 00001 # 5 digits
          maximum: 99999 # 5 digits
        ville:
          type: string
        pays:
          type: string
      required:
        - adresse
        - codePostal
        - ville
      example:
        adresse: 60 rue de la chimie
        codePostal: 38140
        ville: Saint-Martin d'Hères
        pays: France
    AdressePostale:
      description: Une adresse postale avec id (pour la mise à jour) et clients (juste la reponse)
      allOf:
        - $ref: "#/components/schemas/NewAdressePostale"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            clients:
              type: array
              items:
                $ref: "#/components/schemas/Client"
              readOnly: true
          required:
            - id
      example:
        id: 1
        adresse : 60 rue de la chimie
        codePostal: 38140
        ville: Saint-Martin d'Hères
        pays: France
        authors:
          - id: 1
            name: Turc
          - id: 2
            name : Jandot
          - id: 3 
            name : Kone


    NewCommande:
      description: Une commande sans id (pour la création)
      type: object
      properties:
        dateCommande:
          type: string
        prixTotal:
          description: prix total de la commande
          type: integer
          format: int64
        adressePostale:
          type: object
      required:
        - dateCommande
        - adressePostale
      example:
        dateCommande: 01/04/2023
        adressePostale: 60 Rue de la chimie

    Commande:
      description: Une commande avec id (pour la mise à jour) et son client (pour la réponse)
      allOf:
        - $ref: "#/components/schemas/NewCommande"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            client:
              type: object
              items:
                $ref: "#/components/schemas/Client"
              readOnly: true
          required:
            - id
      example:
        id: 1
        daeCommande: 12/02/2022
        adressePostale: 2 Rue du Cotentin

        client:
          - id: 1
            name: Wyss


################################################################################################################

    NewPhoto:
      description: Une photo sans id (pour la création)
      type: object
      properties:
        parametresRetouche:
          type: string
        description:
          type: string
        image:
          type: object
      required:
        - description
      example:
        description: cette photo est composée de l'image "cochon.png" et "fleur.png"

    Photo:
      description: Une photo avec id (pour la mise à jour) et son client (pour la réponse)
      allOf:
        - $ref: "#/components/schemas/NewPhoto"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            client:
              type: object
              $ref: "#/components/schemas/Client"
              readOnly: true
          required:
            - id
      example:
        id: 1
        description: cette photo est composée des images "soleil.png" et "fichier.png"

        client:
          - id: 1
            name: Wyss
############################################################################################################

    NewAlbum:
      description: Un album sans id (pour la création)
      type: object
      properties:
        titre:
          type: string
        pagesAlbum:
          description: les pages de l'album
          type: array
        photoDeCouverture:
          type: object
      required:
        - titre
      example:
       titre : "L'album de Sicong"

    Album:
      description: Un album avec id (pour la mise à jour) et sa page (pour la réponse)
      allOf:
        - $ref: "#/components/schemas/NewAlbum"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            page:
              type: object
              items:
                $ref: "#/components/schemas/Page"
              readOnly: true
          required:
            - id
      example:
        id: 1
####################################################################
    NewArticle:
      description: Un article sans id (pour la création)
      type: object
      properties:
        format:
            type: string
        quantite:
            type: integer
            format: int64
      required:
          - format
          - quantite
      example:
          format: 10X15MAT
          quantite: 3

    Article:
        description: Un article avec id et prix
        type: object
        properties:
          id:
            type: integer
            format: int64
          prix:
            type: integer
            format: int64
          format:
            type: string
          quantite:
            type: integer
            format: int64
        required:
          - id
          - prix
          - format
          - quantite
        example:
          id: 1
          prix: 10.5
          format: 10X15MAT
          quantite: 3

#################################################################################################################

    NewCalendrier:
      description: Un calendrier sans id (pour la création)
      type: object
      properties:
        pages:
          type: object
          $ref: "#/components/schemas/Page"
      required:
        - pages
        
      example:
        description: ce calendrier est composée de 12 pages

    Calendrier:
      description: Un calendrier avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewCalendrier"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        pages:
          - id: 1
            name: Wyss
################################################################################################################
    NewPage:
      description: Une page sans id (pour la création)
      type: object
      properties:
        miseEnPage:
          type: string
        numeroPage:
          type: string
      example:

    Page:
      description: Une page avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewPage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
            photos:
              type: array
              $ref: "#/components/schemas/Photo"
              readOnly: true
          required:
            - id
      example:
        id: 1
        photos:
          - id: 1
            description: cette photo est composée de l'image "bob.png"

###############################################################
    NewCadre:
      description: Un cadre sans id (pour la création)
      type: object
      properties:
        miseEnPage:
          type: string
        photos:
          type: array
          $ref: "#/components/schemas/Photo"
      required:
        - photos
      example:
        miseEnPage: zoom*2
        photos:
          - id: 1
            description: cette photo est composée de l'image "bob.png"

    Cadre:
      description: Un cadre avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewCadre"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
################################################################################

    NewTirage:
      description: Un tirage sans id (pour la création)
      type: object
      properties:
        photos:
          type: object
          $ref: "#/components/schemas/Photo"
      required:
        - photos
      example:
        photos:
          - id: 1
            description: cette photo est composée de l'image "bob.png"

    Tirage:
      description: Un tirage avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewTirage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        photos:
          - id: 1
            description: cette photo est composée de l'image "bob.png" 
            
##########################################################################################

    NewImage:
      description: Une image sans id (pour la création)
      type: object
      properties:
        cheminAcces:
          type: string
        InfoPDV:
          type: string
        proprietaire:
          type: object
          $ref: "#/components/schemas/Client"
      required:
        - cheminAcces

    Image:
      description: Une image avec id (pour la mise à jour)
      allOf:
        - $ref: "#/components/schemas/NewImage"
        - type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
      example:
        id: 1
        cheminAcces: 'C:\Users\Public\Pictures\Sample Pictures\Koala.jpg'
        InfoPDV: 'Device : Huawei Ane-LX1, OS : Android 9, App : PhotoApp'
        proprietaire:
          - id: 1
            name: Wyss
      
